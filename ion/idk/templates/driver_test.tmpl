#!/usr/bin/env python

"""
@package ${test_module}
@file ${file}
@author ${author}
@brief Test cases for ${driver_name} driver
 
USAGE:
 Make tests verbose and provide stdout
   * From the IDK
       $$ bin/test_driver
       $$ bin/test_driver -u
       $$ bin/test_driver -i
       $$ bin/test_driver -q

   * From pyon
       $$ bin/nosetests -s -v ${driver_path}
       $$ bin/nosetests -s -v ${driver_path} -a UNIT
       $$ bin/nosetests -s -v ${driver_path} -a INT
       $$ bin/nosetests -s -v ${driver_path} -a QUAL
"""

__author__ = '${author}'
__license__ = 'Apache 2.0'

import time
import pprint
from mock import Mock, call, DEFAULT

from nose.plugins.attrib import attr

from ion.idk.metadata import Metadata
from ion.idk.comm_config import CommConfig
from ion.idk.unit_test import InstrumentDriverTestCase
from ion.idk.test.driver_qualification import DriverQualificationTestCase
from ${driver_module} import State
from ${driver_module} import Event
from ${driver_module} import Error
from ${driver_module} import Status
from ${driver_module} import Prompt
from ${driver_module} import Channel
from ${driver_module} import Command
from ${driver_module} import Parameter
from ${driver_module} import Capability
from ${driver_module} import MetadataParameter
from ${driver_module} import ${driver_name}InstrumentProtocol
from ${driver_module} import ${driver_name}InstrumentDriver


###############################################################################
#                                UNIT TESTS                                   #
###############################################################################

@attr('UNIT', group='mi')
class Test${driver_name}_UNIT(InstrumentDriverTestCase):
    """Unit Test Container"""
    
    def setUp(self):
        """
        @brief initalize mock objects for the protocol object.
        """
        self.callback = Mock(name='callback')
        self.logger = Mock(name='logger')
        self.logger_client = Mock(name='logger_client')
        self.protocol = ${driver_name}InstrumentProtocol()
    
        self.protocol.configure(self.comm_config)
        self.protocol.initialize()
        self.protocol._logger = self.logger 
        self.protocol._logger_client = self.logger_client
        self.protocol._get_response = Mock(return_value=('$$', None))
        
        # Quick sanity check to make sure the logger got mocked properly
        self.assertEquals(self.protocol._logger, self.logger)
        self.assertEquals(self.protocol._logger_client, self.logger_client)
        
    ###
    #    Add driver specific unit tests
    ###
    
    
###############################################################################
#                            INTEGRATION TESTS                                #
###############################################################################

@attr('INT', group='mi')
class Test${driver_name}_INT(InstrumentDriverTestCase):
    """Integration Test Container"""
    
    @staticmethod
    def driver_module():
        return '${driver_module}'
        
    @staticmethod
    def driver_class():
        return '${driver_name}InstrumentDriver'    
    
    def setUp(self):
        self.protocol = ${driver_name}InstrumentProtocol()
        self.protocol.configure(self.comm_config)
        
    def test_process(self):
        """
        @brief Test for correct launch of driver process and communications, including
        asynchronous driver events.
        """
        driver_process, driver_client = self.init_driver_process_client();
        
        # Add test to verify process exists.

        # Send a test message to the process interface, confirm result.
        msg = 'I am a ZMQ message going to the process.'
        reply = driver_client.cmd_dvr('process_echo', msg)
        self.assertEqual(reply,'process_echo: '+msg)

        # Send a test message to the driver interface, confirm result.
        msg = 'I am a ZMQ message going to the driver.'
        reply = driver_client.cmd_dvr('driver_echo', msg)
        self.assertEqual(reply, 'driver_echo: '+msg)
        
        # Test the event thread publishes and client side picks up events.
        events = [
            'I am important event #1!',
            'And I am important event #2!'
            ]
        reply = driver_client.cmd_dvr('test_events', events=events)
        time.sleep(2)
        
        # Confirm the events received are as expected.
        self.assertEqual(self.events, events)

    ###
    #    Add driver specific integration tests
    ###


###############################################################################
# Auto generated code.  There should rarely be reason to edit anything below. #
###############################################################################
@attr('QUAL', group='mi')
class Test${driver_name}_QUAL(DriverQualificationTestCase):
    """Qualification Test Container"""
    
    # Qualification tests live in the base class.  This class is extended
    # here so that when running this test from 'nosetests' all tests
    # (UNIT, INT, and QUAL) are run.  
    pass

class IntFromIDK(Test${driver_name}_INT):
    """
    This class overloads the default test class so that comm configurations can be overloaded.  This is the test class
    called from the IDK test_driver program
    """
    @classmethod
    def init_comm(cls):
        cls.comm_config = CommConfig.get_config_from_file(Metadata()).dict()

class UnitFromIDK(Test${driver_name}_UNIT):
    """
    This class overloads the default test class so that comm configurations can be overloaded.  This is the test class
    called from the IDK test_driver program
    """
    @classmethod
    def init_comm(cls):
        cls.comm_config = CommConfig.get_config_from_file(Metadata()).dict()

class QualFromIDK(Test${driver_name}_QUAL):
    """
    This class overloads the default test class so that comm configurations can be overloaded.  This is the test class
    called from the IDK test_driver program
    """
    @classmethod
    def init_comm(cls):
        cls.comm_config = CommConfig.get_config_from_file(Metadata()).dict()

