Platform Agent Framework


2013-02-26
- Class renamings per comments on the recent PR (PEP8 conventions):
  CgsnClient -> CGSNClient
  CgsnClientFactory -> CGSNClientFactory
  OmsClient -> CIOMSClient
  OmsClientFactory -> CIOMSClientFactory
  OmsSimulator -> CIOMSSimulator
  RsnPlatformDriver -> RSNPlatformDriver

2013-02-20
- renamings:
  ion.agents.platform.oms -> ion.agents.platform.rsn
  ion.agents.platform.rsn.oms_platform_driver -> ion.agents.platform.rsn.rsn_platform_driver
  OmsPlatformDriver -> RsnPlatformDriver

2013-02-19
- Initial definitions and preliminary tests for CGSN.
  See cgsn/notes.txt

2013-02-15:
- more progress on checksum implementation, but still incomplete.
  Note: instead of using the checksum property on the platform network nodes,
  compute_checksum is called. This seems appropriate in general as the
  computation is apparently not very costly on the memory representation
  provided by the BaseNode classes. In particular, the simulator also relies on
  such representation. However, a real RSN OMS implementation should probably
  use some caching mechanism along with appropriate invalidation upon
  changes to the platform network information.
- For purposes of keeping up-to-date the "local image" of the platform network
  state at the platform agent/driver level --such that successful checksum verification
  is maintained (see test_check_sync in test_platform_agent_with_oms.py)--
  the following operations were adjusted: CONNECT_INSTRUMENT and DISCONNECT_INSTRUMENT.
  TODO NOTE: several other operations still to be adjusted.
- Since they can be used in general, moved NormalResponse and InvalidResponse
  from oms_client to new module ion.agents.platform.responses
- Renamings in network definition classes for more consistent use of "node"
  concept.
- OmsSimulator now uses NetworkUtil to parse the simulated network definition.


2013-02-14:
- moved utility method from platform driver to network_util
- moved utility methods from NNode to class NetworkUtil

2013-02-12:
- As R2.1 is not yet to come, renamed branch "platform_agent_2.1" to
  "platform_agent_R2C4"
- Removed unneeded local and remote branches CIDEVSA-450_resource_monitor_refactoring,
  CIDEVSA-455_platform_state_model, fix_OOIION-631_use_system_time,
  fix_OOIION-674_set_resource_type_to_PlatformDevice, plat_coverage,
  platform_agent_2.1
- some additional code clean-up
- Simplified PortDef: a direct 'network' property. (comms and attrs removed.)
- Added sketch for command CHECK_SYNC (tentative name), currently with preliminary
  compute_checksum operation and comparison between external and local checksums.

2013-02-10:
- cancelled PR: https://github.com/ooici/coi-services/pull/514
  Will continue working on new branch "platform_agent_2.1" in my fork so we can
  eventually only perform a single big merge in the mainline if convenient.

2013-02-10:
- re-enable ability to test against simulator running externally.
- test/helper.py: Environ variable PLAT_NETWORK optionally used to faciliate
  use of smaller network (by default network rooted at Node1A as before):
    PLAT_NETWORK=small  -> rooted at Node1D
    PLAT_NETWORK=single -> rooted at LJ01D  (no children)
- Incorporate platform driver FSM - so CIDEVSA-455 pretty much completed.
- Running all the platform tests with coverage as follows:
  PLAT_NETWORK=small bin/nosetests -v --with-coverage --cover-package=ion.agents.platform \
        ion/agents/platform ion/services/sa/observatory/test/test_oms_launch2.py

2013-02-07:
- Removed redundant operations from CI-OMS interface: get_root_platform_id and
  get_subplatform_ids (get_platform_map is enough), and adjusted some others
  for better consistency. Fixed recently introduces bug in PlatformAgent of
  assigning the network definition's root to _nnode instead of the particular
  node corresponding to the given platform_id. Other adjustments for consistency.
  More verifications regarding platform network map and corresp unit tests.

2013-02-06:
- systematic renaming in RSN-OMS interface operations to follow general CI
  coding guidelines: use underscore.
- set_up_platform_port removed (formerly named setUpPort).
- Instruments:
  Added InstrumentDef class in network.py. A PortDef includes the nominal
  list of "connectable" instruments (TODO: this may not be needed). The
  actual "connected" instruments are operated via the new commands
  CONNECT_INSTRUMENT, DISCONNECT_INSTRUMENT and GET_CONNECTED_INSTRUMENTS.
  These have been added to PlatformAgent, including corresponding support
  in driver and simulator (where the connected instruments per-port
  are maintained in a simple set).

2013-02-03:
- more consistent handling of provided platform configuration (in particular,
  this config is preserved in RESET so an INITIALIZE command can be issued
  again).
- more comprehensive tests for platform state transitions.
- more organized test_platform_agent_with_oms including verification of
  external event reception.

2013-02-02:
  A lot of clean-up related with platform configuration being provided as
  opposed to being retrieved from the external system by the platform
  agent/driver itself. Now a NetworkDefinition object is used as a basis
  for the all the integration tests including test_platform_agent_with_oms and
  test_oms_launch2.
  (No more _topology and _agent_device_map in PlatformDriver/PlatformAgent)

  At the level of the driver, there is now a set_nnode in PlatformDriver to
  set the NNode for the driver. This is the only basis for anything related
  with the static configuration of the platform network rooted at the
  corresponding platform.

  TODO: all regular operations needing static information should only use the
  provided NNode. There will be explicit operations related with checking the
  validity of this configuration against the external system, for example,
  get_checksum(platform_id).

  NOTE: NetworkDefinition and associated types (NNode, AttrDef, PortDef) are
  model objects for the platform agent framework that were mainly
  introduced (long ago, except for NetworkDefinition) while appropriate
  mechanisms (presumably based on ion object definitions) were defined.
  However, it is possible that this representation can interplay with others
  as needed.

  Renamings: Attr -> AttrDef; Port -> PortDef. Removed value property from
  AttrDef (NetworkDefinition is only about the static structure of the network,
  not dynamic information).

2013-02-01:
- CIDEVSA-455 Align platform agent state model with instrument agent / resource agent state model
  - introduced MONITORING state, entered upon explicit START_MONITORING command
    (not anymore as part of the RUN command).
  - introduced STOPPED state

2013-01-28:
- CIDEVSA-450: Refactor: move resource monitor greenlet functionality to platform agent level
  - put functionality at platform agent level with new supporting modules:
    - platform_resource_monitor.py
    - resource_monitor.py
  - remove functionality from platform_driver and oms_platform_driver:
    - start_resource_monitoring and stop_resource_monitoring
    - associated oms_resource_monitor.py

2013-01-15:
- code clean-up to improve code coverage: from 79% to 86% when running the
  platform agent specific tests (so actual coverage when running the whole
  test suite might be even better):
  bin/nosetests --with-coverage --cover-package=ion.agents.platform ion/agents/platform ion/services/sa/observatory/test/test_oms_launch2.py

2013-01-22
- fix OOIION-674 Set resource_type in Platform Agent to be PlatformDevice.

2013-01-11
- OOIION-631 Use system time (get_ion_ts and similar) instead of NTP
  - get_resource and set_resource adjusted.
  - refactor: moved *DriverEvent classes from platform_driver into new
    module platform_driver_event.
  - Removed the unneeded ts attribute in *DriverEvent classes.


2012-10-31:
- preparations for IOC demo
- adjustments in network.yml to use the attribute 'input_voltage' for the
  platforms with IDs starting with "Node".


2012-10-12:
Resolved/Fixed:
- CIDEVSA-385 CI and platform agent interaction
- CIDEVSA-388 Resource provisioning
- CIDEVSA-387 Notification of alarms defined on the external platform network
DROPPED NO-IMPACT:
- CIDEVSA-389 Instrument activation/deactivation


2012-09-27:
- initial version of alarm management including support from the simulator,
  both embedded and external:

    embedded:
    $ bin/nosetests -v ion/agents/platform/oms/test/test_oms_client.py
    ... lots of log messages from the embedded simulator ...
    OK

    external (simulator running locally):
    $ OMS="localsimulator" bin/nosetests  ion/agents/platform/oms/test/test_oms_client.py
    OK


- recap of typical launching of the platform tests (*):
    $ bin/nosetests  -va UNIT  ion/agents/platform
    ... Ran 31 tests in 5.934s  OK

    $ bin/nosetests  -va INT   ion/agents/platform
    ... Ran 35 tests in 157.532s  OK

    $ bin/nosetests -va INT ion/services/sa/observatory/test/test_oms_launch*.py
    ... Ran 2 tests in 87.765s   OK

    combining the INT ones along --with-pycc:
    $ bin/nosetests  -va INT --with-pycc  ion/agents/platform  ion/services/sa/observatory/test/test_oms_launch*.py
    ... Ran 37 tests in 182.232s


(*) Note: all of these tests using the "embedded" simulator; the external simulator
case needs further revision regarding alarms; in particular, I've seen some stacktraces
generated by oms_resource_monitor while attributes values are requested from the
external OMS:
  File "/Users/carueda/workspace/coi-services/ion/agents/platform/oms/oms_resource_monitor.py", line 83, in _retrieve_attribute_value
    retval = self._oms.getPlatformAttributeValues(self._platform_id, attrNames, from_time)
  ...
  CannotSendRequest
    <Greenlet at 0x101b51c30: <bound method OmsResourceMonitor._run of <ion.agents.platform.oms.oms_resource_monitor.OmsResourceMonitor object at 0x10468afd0>>> failed with CannotSendRequest
  ResponseNotReady
  <Greenlet at 0x101b51b90: <bound method OmsResourceMonitor._run of <ion.agents.platform.oms.oms_resource_monitor.OmsResourceMonitor object at 0x10468ab10>>> failed with ResponseNotReady

Perhaps the SimpleXMLRPCServer used in oms_simulator_server rejects new
requests while there is one ongoing (?).


2012-09-25:
Some TODOs:
    - PlatformAgent: what to do if a command in some sub-platform fails?

2012-09-14:
- now using Process Dispatcher to launch platform agents.

2012-09-12:
- adjustments according to updates in CI-OMS+interface

2012-09-11:
- additions and removals according to updates in
  https://confluence.oceanobservatories.org/display/CIDev/CI-OMS+interface
- note TODOs in source code related with the mix of information sources:
  topology from passed dict in plat_config and platform attributes from OMS.

2012-09-10:
- Note: log messages are not always shown when running tests with the pycc
  plugin, for example, see comment in OmsPlatformDriver.go_active.
- various updates related with the topology now provided via platform
  configuration. See ion/services/sa/observatory/test/test_oms_launch.py
- removed obsolete *platform_network_builder sources.

All tests:

    $ GEN_DIAG=y OMS=embsimulator bin/nosetests --with-pycc -va UNIT -a INT  ion/agents/platform  ion/services/sa/observatory/test/test_oms_launch.py
    pyon: sys_name changed from 'None' to 'ion_test_2adc8d'
    Deleted exchanges:

    Deleted queues:

    Starting cc process: bin/pycc --noshell -sp --sysname=ion_test_2adc8d --logcfg=res/config/logging.pycc.yml --rel=res/deploy/r2deploy.yml --config={'system': {'auto_bootstrap': True}}
    pycc: ION Container starter with command line options: Namespace(config="{'system': {'auto_bootstrap': True}}", config_from_directory=False, daemon=False, force_clean=False, immediate=False, logcfg='res/config/logging.pycc.yml', mx=False, no_container=False, noshell=True, pidfile=None, proc=None, rel='res/deploy/r2deploy.yml', signalparent=True, sysname='ion_test_2adc8d')
    pyon: sys_name changed from 'None' to 'ion_test_2adc8d'
    CouchDataStore: INFO: Connecting to CouchDB server: http://localhost:5984
    CouchDataStore: INFO: Connecting to CouchDB server: http://localhost:5984
    pycc: auto_bootstrap=True.
    CouchDataStore: INFO: Connecting to CouchDB server: http://localhost:5984
    store_interfaces: Storing system config in directory...
    pyon: pyon.bootstrap (bootstrap_pyon) executing...
    store_interfaces: Storing 13 entries in directory...
    store_interfaces: Storing 380 resources in registry...
    store_interfaces: Storing interfaces successful
    CouchDataStore: INFO: Closing connection to CouchDB
    CouchDataStore: INFO: Closing connection to CouchDB
    pyon: pyon.bootstrap (bootstrap_pyon) executing...
    pyon: WARNING -- bootstrap_pyon() called again!
    pycc: Signal parent pid 53370 that pycc pid 53374 service start process is complete...
    Child container is ready...
    Dump child container state to file...
    Start nose tests now...
    test_aa_ping (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ac_getPlatformMap (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ad_getPlatformAttributeNames (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ae_getPlatformAttributeValues (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_af_getPlatformAttributeInfos (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ag_getPlatformPorts (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ah_getPortInfo (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ai_setUpPort (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_aj_turnOnPort (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ak_turnOffPort (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_aa_ping (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ac_getPlatformMap (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ad_getPlatformAttributeNames (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ae_getPlatformAttributeValues (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_af_getPlatformAttributeInfos (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ag_getPlatformPorts (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ah_getPortInfo (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ai_setUpPort (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_aj_turnOnPort (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ak_turnOffPort (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test (ion.agents.platform.oms.test.test_oms_platform_driver.TestOmsPlatformDriver) ... ok
    test_go_active_and_run (ion.agents.platform.test.test_platform_agent_with_oms.TestPlatformAgent) ... ok
    test_oms_create_and_launch (ion.services.sa.observatory.test.test_oms_launch.TestOmsLaunch) ... No handlers could be found for logger "interface.services.icontainer_agent"
    generating diagram '/var/folders/El/ElbkRaTJEeeIlKJgl9AsBU+++TI/-Tmp-/1e30a340bff1407686b45d97739e82fb.dot'
    generating png '/var/folders/El/ElbkRaTJEeeIlKJgl9AsBU+++TI/-Tmp-/1e30a340bff1407686b45d97739e82fb.png'
    opening '/var/folders/El/ElbkRaTJEeeIlKJgl9AsBU+++TI/-Tmp-/1e30a340bff1407686b45d97739e82fb.png'
    ok

    Blame Report on left over objects in couchd db
    ====================
    ----------------------------------------------------------------------
    Ran 23 tests in 59.447s

    OK
    Shut down cc process
    	Closing container with pid:53374
    CouchDataStore: INFO: Connecting to CouchDB server: http://localhost:5984
    CouchDataStore: INFO: Connecting to CouchDB server: http://localhost:5984
    CouchDataStore: INFO: Closing connection to CouchDB
    (coi)bochica:coi-services carueda$ Warning: shutdown_or_die found a previously registered ALARM and overrode it.




2012-09-04:
Add operations (ping-agent, ping-resource, get-resource).
Adjust some operations according to changes in the interface spec.

2012-08-29:
Ongoing internal refactoring to move network creation functionality from
PlatformNetworkBuilder to PlatformAgent itself, and to simplify the design.


2012-08-21:
Adjustments done to follow changes in recent agent refactoring.
All tests passing again as before.

2012-08-20:
Latest run of tests before merging with agent refactoring:

platform-agent branched out from master's commit
4fd1e54f908519fbcab2604ea81090e79410be4e (8/1/12):
    $ bin/nosetests -va UNIT -a INT  ion/agents/platform
    test_aa_ping (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ac_getPlatformMap (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ad_getPlatformAttributeNames (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ae_getPlatformAttributeValues (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_af_getPlatformAttributeInfos (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ag_getPlatformPorts (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ah_getPortInfo (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ai_setUpPort (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_aj_turnOnPort (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_ak_turnOffPort (ion.agents.platform.oms.simulator.test.test_oms_simulator.Test) ... ok
    test_aa_ping (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ac_getPlatformMap (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ad_getPlatformAttributeNames (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ae_getPlatformAttributeValues (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_af_getPlatformAttributeInfos (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ag_getPlatformPorts (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ah_getPortInfo (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ai_setUpPort (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_aj_turnOnPort (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test_ak_turnOffPort (ion.agents.platform.oms.test.test_oms_client.Test) ... ok
    test (ion.agents.platform.oms.test.test_oms_platform_driver.TestOmsPlatformDriver) ... ok
    test_build_platform_agent_client_network (ion.agents.platform.oms.test.test_oms_platform_network_builder.Test) ... ok
    test_go_active_and_run (ion.agents.platform.test.test_platform_agent.TestPlatformAgent) ... ok

    ----------------------------------------------------------------------
    Ran 23 tests in 53.403s

    OK



- CI side will maintain information about the platform topology for a given
  network (RSN). In general, the possible "sources" to obtain the topology are:
  - some CI resource registry
  - a deployment file (like r2deploy.yml)
  - the actual network, which, in the case of RSN, is the platform map provided
    by the OMS xml/rpc interface.
